{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-t-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-t-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-t-mean' );\nvar median = require( '@stdlib/stats-base-dists-t-median' );\nvar mode = require( '@stdlib/stats-base-dists-t-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-t-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-t-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-t-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-t-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-t-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-t-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-t-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-t-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction tCDF( x ) {\n\treturn cdf( x, this.v );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction tLogCDF( x ) {\n\treturn logcdf( x, this.v );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction tLogPDF( x ) {\n\treturn logpdf( x, this.v );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction tPDF( x ) {\n\treturn pdf( x, this.v );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction tQuantile( p ) {\n\treturn quantile( p, this.v );\n}\n\n\n// MAIN //\n\n/**\n* Student's t distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [v=1.0] - degrees of freedom\n* @throws {TypeError} `v` must be a positive number\n* @returns {T} distribution instance\n*\n* @example\n* var t = new T( 1.0 );\n*\n* var y = t.cdf( 0.8 );\n* // returns ~0.715\n*\n* var v = t.mode;\n* // returns 0.0\n*/\nfunction T() {\n\tvar v;\n\tif ( !(this instanceof T) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new T();\n\t\t}\n\t\treturn new T( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Rate parameter must be a positive number. Value: `%s`.', v ) );\n\t\t}\n\t} else {\n\t\tv = 1.0;\n\t}\n\tdefineProperty( this, 'v', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn v;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tv = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Student's t distribution differential entropy.\n*\n* @name entropy\n* @memberof T.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.entropy;\n* // returns ~1.682\n*/\nsetReadOnlyAccessor( T.prototype, 'entropy', function get() {\n\treturn entropy( this.v );\n});\n\n/**\n* Student's t distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof T.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.kurtosis;\n* // returns Infinity\n*/\nsetReadOnlyAccessor( T.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.v );\n});\n\n/**\n* Student's t distribution expected value.\n*\n* @name mean\n* @memberof T.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.mean;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'mean', function get() {\n\treturn mean( this.v );\n});\n\n/**\n* Student's t distribution median.\n*\n* @name median\n* @memberof T.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.median;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'median', function get() {\n\treturn median( this.v );\n});\n\n/**\n* Student's t distribution mode.\n*\n* @name mode\n* @memberof T.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'mode', function get() {\n\treturn mode( this.v );\n});\n\n/**\n* Student's t distribution skewness.\n*\n* @name skewness\n* @memberof T.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( T.prototype, 'skewness', function get() {\n\treturn skewness( this.v );\n});\n\n/**\n* Student's t distribution standard deviation.\n*\n* @name stdev\n* @memberof T.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.stdev;\n* // returns ~1.414\n*/\nsetReadOnlyAccessor( T.prototype, 'stdev', function get() {\n\treturn stdev( this.v );\n});\n\n/**\n* Student's t distribution variance.\n*\n* @name variance\n* @memberof T.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var t = new T( 4.0 );\n*\n* var v = t.variance;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( T.prototype, 'variance', function get() {\n\treturn variance( this.v );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.cdf( 0.5 );\n* // returns ~0.667\n*/\nsetReadOnly( T.prototype, 'cdf', tCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.logcdf( 0.5 );\n* // returns ~-0.405\n*/\nsetReadOnly( T.prototype, 'logcdf', tLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.logpdf( 0.8 );\n* // returns ~-1.456\n*/\nsetReadOnly( T.prototype, 'logpdf', tLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof T.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.pdf( 0.8 );\n* // returns ~0.233\n*/\nsetReadOnly( T.prototype, 'pdf', tPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof T.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var t = new T( 2.0 );\n*\n* var v = t.quantile( 0.5 );\n* // returns 0.0\n*/\nsetReadOnly( T.prototype, 'quantile', tQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = T;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t distribution constructor.\n*\n* @module @stdlib/stats-base-dists-t-ctor\n*\n* @example\n* var T = require( '@stdlib/stats-base-dists-t-ctor' );\n*\n* var t = new T( 1.0 );\n*\n* var y = t.cdf( 0.8 );\n* // returns ~0.715\n*\n* var mode = t.mode;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "pdf", "quantile", "format", "tCDF", "x", "tLogCDF", "tLogPDF", "tPDF", "tQuantile", "p", "T", "v", "value", "main"]
}
